// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "books_service/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1, entity
func (_m *BookRepository) Create(ctx context.Context, _a1 *sql.Tx, entity *domain.Domain) (*domain.Domain, error) {
	ret := _m.Called(ctx, _a1, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) (*domain.Domain, error)); ok {
		return rf(ctx, _a1, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) *domain.Domain); ok {
		r0 = rf(ctx, _a1, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *domain.Domain) error); ok {
		r1 = rf(ctx, _a1, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, _a1, id
func (_m *BookRepository) Delete(ctx context.Context, _a1 *sql.Tx, id int) error {
	ret := _m.Called(ctx, _a1, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, _a1
func (_m *BookRepository) FindAll(ctx context.Context, _a1 *sql.Tx) ([]*domain.Domain, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) ([]*domain.Domain, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) []*domain.Domain); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, _a1, id
func (_m *BookRepository) FindById(ctx context.Context, _a1 *sql.Tx, id int) (*domain.Domain, error) {
	ret := _m.Called(ctx, _a1, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (*domain.Domain, error)); ok {
		return rf(ctx, _a1, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) *domain.Domain); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, _a1, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1, entity
func (_m *BookRepository) Update(ctx context.Context, _a1 *sql.Tx, entity *domain.Domain) (*domain.Domain, error) {
	ret := _m.Called(ctx, _a1, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) (*domain.Domain, error)); ok {
		return rf(ctx, _a1, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *domain.Domain) *domain.Domain); ok {
		r0 = rf(ctx, _a1, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *domain.Domain) error); ok {
		r1 = rf(ctx, _a1, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
